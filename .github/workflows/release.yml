name: Release and Pack

# 触发条件：可以是push到main分支或创建新标签
on:
  push:
    branches:
      - main
    tags:
      - 'v*'

jobs:
  pack_and_release:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    # 读取配置文件
    - name: Read config file
      id: config
      run: |
        CONFIG=$(cat config.json)
        echo "CONFIG=$CONFIG" >> $GITHUB_ENV

    # 解析配置文件
    - name: Parse config
      id: parse_config
      run: |
        DIR_TO_PACK=$(echo "${{ env.CONFIG }}" | jq -r '.directory')
        IGNORED_FILES=$(echo "${{ env.CONFIG }}" | jq -r '.ignored_files')
        ZIP_NAME=$(echo "${{ env.CONFIG }}" | jq -r '.zip_name')
        IS_PRERELEASE=$(echo "${{ env.CONFIG }}" | jq -r '.is_prerelease')
        RELEASE_VERSION=$(echo "${{ env.CONFIG }}" | jq -r '.version')
        RELEASE_NOTES=$(echo "${{ env.CONFIG }}" | jq -r '.notes')
        
        echo "DIR_TO_PACK=$DIR_TO_PACK" >> $GITHUB_ENV
        echo "IGNORED_FILES=$IGNORED_FILES" >> $GITHUB_ENV
        echo "ZIP_NAME=$ZIP_NAME" >> $GITHUB_ENV
        echo "IS_PRERELEASE=$IS_PRERELEASE" >> $GITHUB_ENV
        echo "RELEASE_VERSION=$RELEASE_VERSION" >> $GITHUB_ENV
        echo "RELEASE_NOTES=$RELEASE_NOTES" >> $GITHUB_ENV

    # 打包文件
    - name: Pack files
      run: |
        # 忽略文件列表处理
        IGNORE_FLAGS=""
        for item in $(echo "${{ env.IGNORED_FILES }}" | tr ',' '\n'); do
          IGNORE_FLAGS+=" --exclude='$item'"
        done
        
        # 打包
        zip -r "${{ env.ZIP_NAME }}.zip" ${{ env.DIR_TO_PACK }}$IGNORE_FLAGS

    # 创建或更新Release
    - name: Create or update release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ env.RELEASE_VERSION }}
        release_name: Release ${{ env.RELEASE_VERSION }}
        body: ${{ env.RELEASE_NOTES }}
        draft: false
        prerelease: ${{ env.IS_PRERELEASE == "true" }}

    # 上传压缩包为资产
    - name: Upload release asset
      id: upload-release-asset 
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} 
        asset_path: ./${{ env.ZIP_NAME }}.zip
        asset_name: ${{ env.ZIP_NAME }}.zip
        asset_content_type: application/zip
        